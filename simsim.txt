import { Client } from 'ssh2';
import { spawn } from 'child_process';

const sshConfig = {
  host: 'remote-machine.example.com',
  username: 'your-ssh-username',
  privateKey: require('fs').readFileSync('/path/to/your/private/key'),
};

const startSimulator = (ssh: Client) => {
  return new Promise((resolve, reject) => {
    const command = './startRobotSimulator';
    ssh.exec(command, (err, stream) => {
      if (err) {
        reject(err);
        return;
      }
      stream.on('close', (code, signal) => {
        if (code === 0) {
          resolve();
        } else {
          reject(`Process exited with code ${code} and signal ${signal}`);
        }
      });
      stream.on('data', (data) => {
        if (data.includes('Success the robot has been started')) {
          resolve();
        }
      });
      stream.stderr.on('data', (data) => {
        reject(data);
      });
    });
  });
};

const stopSimulator = (ssh: Client) => {
  return new Promise((resolve, reject) => {
    const command = './stopRobotSimulator';
    ssh.exec(command, (err, stream) => {
      if (err) {
        reject(err);
        return;
      }
      stream.on('close', (code, signal) => {
        if (code === 0) {
          resolve();
        } else {
          reject(`Process exited with code ${code} and signal ${signal}`);
        }
      });
      stream.on('data', (data) => {
        if (data.includes('Success the robot has been stopped')) {
          resolve();
        }
      });
      stream.stderr.on('data', (data) => {
        reject(data);
      });
    });
  });
};

describe('Robot Simulator Tests', () => {
  let ssh: Client;

  beforeAll((done) => {
    ssh = new Client();
    ssh.on('ready', () => {
      startSimulator(ssh).then(() => done()).catch(done.fail);
    });
    ssh.on('error', (err) => {
      done.fail(err);
    });
    ssh.connect(sshConfig);
  });

  afterAll((done) => {
    stopSimulator(ssh)
      .then(() => ssh.end())
      .then(() => done())
      .catch(done.fail);
  });

  it('should test the /robot/connected endpoint', async () => {
    // Call your endpoint test function here, and it will only execute after the Simulator has started.
  });
});

import { AsyncResource } from 'async_hooks';
import { Client } from 'ssh2';
import { startSimulator } from './startSimulator';
import { stopSimulator } from './stopSimulator';

const asyncResources = new Map();

const asyncHook = async_hooks.createHook({
  init(asyncId, type, triggerAsyncId) {
    const asyncResource = new AsyncResource(type);
    asyncResources.set(asyncId, asyncResource);
    asyncResource.emitBefore();
  },
  destroy(asyncId) {
    const asyncResource = asyncResources.get(asyncId);
    if (asyncResource) {
      asyncResource.emitAfter();
      asyncResources.delete(asyncId);
    }
  },
});

beforeAll(() => {
  asyncHook.enable();
});

afterAll(() => {
  asyncHook.disable();
});

test('should connect to robot simulator', async () => {
  const ssh = new Client();
  const connectionPromise = new Promise((resolve, reject) => {
    ssh.on('ready', () => {
      console.log('SSH connection established.');
      resolve();
    });
    ssh.on('error', (err) => {
      console.error(err);
      reject(err);
    });
    ssh.connect({
      host: 'robot-simulator.example.com',
      port: 22,
      username: 'testuser',
      password: 'testpass',
    });
  });

  await connectionPromise;

  try {
    await startSimulator(ssh);
    const isConnected = await checkConnection();
    expect(isConnected).toBe(true);
  } finally {
    await stopSimulator(ssh);
    ssh.end();
  }
});

async function checkConnection(): Promise<boolean> {
  // Send a request to the /robot/connected endpoint and return a boolean
  // indicating whether the response indicates that the robot simulator is connected.
}

export async function startSimulator(ssh: NodeSSH) {
  const result = await ssh.execCommand('./startRobtSimulator', { cwd: '/path/to/simulator' });
  if (result.stdout.trim() !== 'Success the robot has been started') {
    throw new Error(`Failed to start simulator: ${result.stderr}`);
  }
}
Thank you so much for your kind wishes for Eid. Your thoughtfulness means a lot to me.
