Title: Using Wrong patientOid in GET Method for /patients Endpoint Kills Application

Description:
When attempting to update a patient using the GET method for the /patients endpoint, using an incorrect patientOid value causes the entire application to crash. This issue has been replicated consistently and poses a serious problem for our users.

Steps to Reproduce:

Make a GET request to the /patients endpoint with an incorrect patientOid value
Observe that the application crashes
Expected Result:
The application should return a response indicating that the patientOid value is incorrect or not found, without crashing the entire application.

Actual Result:
The entire application crashes, making it unusable until restarted.

Impact:
This issue has a severe impact on our users, as it renders the application unusable until restarted. We recommend prioritizing this issue for immediate attention.

Attachments:
If applicable, you may attach any relevant screenshots or logs that could help with reproducing or debugging the issue.

When a GET request is made to the /patients endpoint with an incorrect patientOid, the application should return an error message indicating that the patientOid is incorrect and the patient should not be updated.
The error message should clearly state that the patientOid provided in the request is invalid and provide suggestions for correcting it.
The application should not crash or become unusable when an invalid patientOid is used in the GET request.
The defect fix should be tested across multiple configurations and environments to ensure it does not introduce any new issues or regressions.
Automated tests should be created to validate that the fix works as expected and that the defect does not reappear in the future.

When a GET request is made to the /patients endpoint with an incorrect patientOid, the application should return an error message indicating that the patientOid is incorrect and the patient should not be updated.
The error message should clearly state that the patientOid provided in the request is invalid and provide suggestions for correcting it.
The application should not crash or become unusable when an invalid patientOid is used in the GET request.
The defect fix should be tested across multiple configurations and environments to ensure it does not introduce any new issues or regressions.
Automated tests should be created to validate that the fix works as expected and that the defect does not reappear in the future.
